
cmake_minimum_required (VERSION 3.12 FATAL_ERROR)

enable_testing()

project(experiments)

add_library(EXP_THIRDPARTY_CATCH2 INTERFACE IMPORTED)
add_library(EXP_THIRDPARTY_FMT INTERFACE IMPORTED)
add_library(EXP_THIRDPARTY_BOOST INTERFACE IMPORTED)
add_library(EXP_THIRDPARTY_SFML INTERFACE IMPORTED)

if("${EXP_PKG_MGR}" STREQUAL "vcpkg")
    find_package(Catch2 CONFIG REQUIRED)
    find_package(fmt CONFIG REQUIRED)
    find_package(Boost REQUIRED COMPONENTS filesystem program_options)
    find_package(SFML CONFIG REQUIRED COMPONENTS system main window graphics audio)
    target_link_libraries(EXP_THIRDPARTY_CATCH2 INTERFACE Catch2::Catch2)
    target_link_libraries(EXP_THIRDPARTY_FMT INTERFACE fmt::fmt-header-only)
    target_link_libraries(EXP_THIRDPARTY_BOOST INTERFACE Boost::boost)
    target_link_libraries(EXP_THIRDPARTY_SFML INTERFACE sfml-system sfml-main sfml-window sfml-graphics sfml-audio)
elseif("${EXP_PKG_MGR}" STREQUAL "conan")
    include(${CMAKE_BINARY_DIR}/conanbuildinfo.cmake)
    conan_basic_setup(TARGETS ON)
    target_link_libraries(EXP_THIRDPARTY_CATCH2 INTERFACE CONAN_PKG::Catch2)
    target_link_libraries(EXP_THIRDPARTY_FMT INTERFACE CONAN_PKG::fmt)
    target_link_libraries(EXP_THIRDPARTY_BOOST INTERFACE CONAN_PKG::boost)
    target_link_libraries(EXP_THIRDPARTY_SFML INTERFACE CONAN_PKG::sfml)
endif()

function(exp_setup_common_options target_name)
    target_include_directories("${target_name}" PRIVATE ..)
    set_property(TARGET "${target_name}" PROPERTY CXX_STANDARD 17)
    if("${CMAKE_CXX_COMPILER_ID}" STREQUAL "Clang" OR "${CMAKE_CXX_COMPILER_ID}" STREQUAL "GNU")
        target_link_libraries("${target_name}" pthread)
    elseif("${CMAKE_CXX_COMPILER_ID}" STREQUAL "MSVC")
        target_compile_definitions("${target_name}" PRIVATE _CRT_SECURE_NO_WARNINGS _SCL_SECURE_NO_WARNINGS _SILENCE_ALL_CXX17_DEPRECATION_WARNINGS)
    endif()
endfunction()

function(exp_use_filesystem target_name)
    if(NOT ("${CMAKE_HOST_SYSTEM_NAME}" STREQUAL "Windows"))
        message("Using BOOST FILESYSTEM")
        set(use_boost_filesystem 1)
        target_link_libraries("${target_name}" EXP_THIRDPARTY_BOOST)
    else()
        message("Using STD FILESYSTEM")
        set(use_boost_filesystem 0)
    endif()
    target_compile_definitions("${target_name}" PRIVATE EXP_USE_BOOST_FILESYSTEM=${use_boost_filesystem})
endfunction()

function(exp_use_variant target_name)
    if(NOT ("${CMAKE_HOST_SYSTEM_NAME}" STREQUAL "Windows"))
        message("Using BOOST VARIANT")
        set(use_boost_variant 1)
        target_link_libraries("${target_name}" EXP_THIRDPARTY_BOOST)
    else()
        message("Using STD VARIANT")
        set(use_boost_variant 0)
    endif()
    target_compile_definitions("${target_name}" PRIVATE EXP_USE_BOOST_VARIANT=${use_boost_variant})
endfunction()

function(exp_use_string_view target_name)
    if(NOT ("${CMAKE_HOST_SYSTEM_NAME}" STREQUAL "Windows"))
        message("Using BOOST STRING_VIEW")
        set(use_boost_string_view 1)
        target_link_libraries("${target_name}" EXP_THIRDPARTY_BOOST)
    else()
        message("Using STD STRING_VIEW")
        set(use_boost_string_view 0)
    endif()
    target_compile_definitions("${target_name}" PRIVATE EXP_USE_BOOST_STRING_VIEW=${use_boost_string_view})
endfunction()

add_subdirectory("src/Algorithms")
add_subdirectory("src/BoolExprParser")
add_subdirectory("src/boggle")
add_subdirectory("src/Concurrency")
add_subdirectory("src/DetectionIdiom")
add_subdirectory("src/error_handling")
add_subdirectory("src/ExprTemp")
add_subdirectory("src/fp_in_cpp")
add_subdirectory("src/sqlgen")
add_subdirectory("src/TestIterators")
add_subdirectory("src/things")
add_subdirectory("src/DelaySubTitles")

if("${EXP_PKG_MGR}" STREQUAL "conan")
    add_subdirectory("src/recover_photos")
endif()

if("${CMAKE_CXX_COMPILER_ID}" STREQUAL "MSVC")
    add_subdirectory("src/cellang")
    add_subdirectory("src/coroutines")
    add_subdirectory("src/KennyKerr")
    add_subdirectory("src/TestModules")
endif()

if(("${EXP_PKG_MGR}" STREQUAL "vcpkg") AND ("${CMAKE_HOST_SYSTEM_NAME}" STREQUAL "Windows"))
    add_subdirectory("src/Circuit")
endif()
